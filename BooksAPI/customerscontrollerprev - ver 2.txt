[Route("api/[controller]")]
    [ApiController]
    public class CustomersController : ControllerBase
    {
        private readonly BookAppContext _context;
        private readonly JWTSettings _jwtSettings;

        public CustomersController(BookAppContext context,IOptions<JWTSettings> jwtSettings)
        {
            _context = context;
            _jwtSettings = jwtSettings.Value;
        }

        private string GenerateAccessToken(int customerId)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_jwtSettings.SecretKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name,Convert.ToString(customerId))
                }),
                Expires = DateTime.UtcNow.AddDays(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token); 
        }
        
        
        // GET: api/Customers
        [HttpGet]
        public IEnumerable<Customers> GetCustomers()
        {
            return _context.Customers.ToList();
        }

        //POST: api/customers/login
        [HttpPost("login")]
        public async Task<ActionResult<CustomerWithToken>> Login([FromBody] Customers customer)
        {
            customer = await _context.Customers.Where(c => c.Email == customer.Email && c.Password == customer.Password).FirstOrDefaultAsync();
            CustomerWithToken customerWithToken = null;

            if(customer!=null)
            {
                RefreshToken refreshToken = GenerateRefreshToken();
                customer.RefreshToken.Add(refreshToken);
                await _context.SaveChangesAsync();

                customerWithToken = new CustomerWithToken(customer);
                customerWithToken.RefreshToken = refreshToken.Token;
            }

            if (customerWithToken == null)
            {
                return NotFound();
            }

            //sign your token here
            customerWithToken.AccessToken = GenerateAccessToken(customer.CustId);
            
            return customerWithToken;
        }

        //POST: api/customers/login
        [HttpPost("RefreshToken")]
        public async Task<ActionResult<CustomerWithToken>> RefreshToken([FromBody] RefreshRequest refreshRequest)
        {
            Customers customer = GetCustomerFromAccessToken(refreshRequest.AccessToken);

            if(customer!=null && ValidateFreshToken(customer,refreshRequest.RefreshToken))
            {

            }

            return null;
        }

        private bool ValidateFreshToken(Customers customer, string refreshToken)
        {
            throw new NotImplementedException();
        }

        private Customers GetCustomerFromAccessToken(string accessToken)
        {
            throw new NotImplementedException();
        }

        private RefreshToken GenerateRefreshToken()
        {
            RefreshToken refreshToken = new RefreshToken();
            var randomNumber = new byte[32];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(randomNumber);
                refreshToken.Token = Convert.ToBase64String(randomNumber);
            }
            refreshToken.ExpiryDate = DateTime.UtcNow.AddMonths(6);
            return refreshToken;
        }

        // GET: api/Customers
        [HttpGet("getcust")]
        public async Task<ActionResult<Customers>> GetCustAsync()
        {
            string emailAddress = HttpContext.User.Identity.Name;
            var cust = await _context.Customers.Where(c => c.Email == emailAddress).FirstOrDefaultAsync();
            cust.Password = null;
            return Ok(cust);
        }

        // GET: api/Customers/5
        [HttpGet("{id}")]
        public async Task<IActionResult> GetCustomers([FromRoute] int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var customers = await _context.Customers.FindAsync(id);

            if (customers == null)
            {
                return NotFound();
            }

            return Ok(customers);
        }

        // PUT: api/Customers/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCustomers([FromRoute] int id, [FromBody] Customers customers)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != customers.CustId)
            {
                return BadRequest();
            }

            _context.Entry(customers).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CustomersExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Customers
        [HttpPost]
        public async Task<IActionResult> PostCustomers([FromBody] Customers customers)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _context.Customers.Add(customers);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetCustomers", new { id = customers.CustId }, customers);
        }

        // DELETE: api/Customers/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCustomers([FromRoute] int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var customers = await _context.Customers.FindAsync(id);
            if (customers == null)
            {
                return NotFound();
            }

            _context.Customers.Remove(customers);
            await _context.SaveChangesAsync();

            return Ok(customers);
        }

        private bool CustomersExists(int id)
        {
            return _context.Customers.Any(e => e.CustId == id);
        }
    }